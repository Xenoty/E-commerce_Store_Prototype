@model SurfLocalShop.ViewModels.ProductIndexViewModel
@using PagedList.Mvc

@{
    ViewBag.Title = "Products";
}

<style>
    body {
        background-color: #F9F9F9 !important;
    }

    h2 {
        text-align: center;
        color: var(--primary);
        margin-bottom: 5vh;
        margin-top: 5vh;
        font-size: 2.3rem;
    }

    .products-wrapper {
        margin-bottom: 3rem;
        /*margin-top: 3rem;*/
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 200px));
        grid-gap: 3rem;
    }

    .product-card {
        background-color: white;
        padding: 1rem;
       /* height: fit-content;*/
    }

    .product-card a{
        text-decoration:none;
    }

    .product-card .image {
        margin-bottom: 1rem;
        /* margin: auto; */
        min-height: 230px;
        max-height: 230px;
        overflow: hidden;
        position: relative;
    }

    .product-card .image img{
   /*     max-width: 60px;*/
        width:100%;
/*        height:100%;*/
        display:block;
        margin:auto;
    }

    .product-content {
        padding: 0px 2rem;
        margin-bottom: 1.1rem;
    }

    .product-content *{
        color:var(--grey);
    }

    .product-content .Name{
        text-align:left;
        font-family:Poppins-SemiBold;
        font-size:16px;
    }

    .product-card .description{
        font-size: 14px;
        line-height:14px;
        max-height:30px;
        overflow:hidden;
    }

    .product-card .price {
        text-align: right;
        font-size: 16px;
        font-family: Poppins-SemiBold;
        color: var(--primary);
    }

    .filter {
        background-color: var(--primary);
        border: none;
        padding: 3px 1.1rem;
        border-radius: 5px;
        color: white;
        margin-left: 1rem;
        font-size: 16px;
    }

    .select-list {
        padding-left: 5px;
        margin-left: 5px;
    }

</style>


<h2> Local Brand, High Quality </h2>


@if (Request.IsAuthenticated && User.IsInRole("Admin")) 
{
    @Html.ActionLink("Create New", "Create", "Products", null, new { @class = "btn btn-success" })
}
@using (Html.BeginRouteForm("ProductsIndex", FormMethod.Get))
{
    <label>Filter by category:</label>
    @Html.DropDownListFor(vm => vm.Category, Model.CatFilterItems, "All", new {@class = "select-list"});
    <label>Sort by:</label>
    @Html.DropDownListFor(vm => vm.SortBy, new SelectList(Model.Sorts, "Value", "Key"), "Default", new { @class = "select-list" })
    <input type="submit" value="Filter" name="filter" class="filter"/>
    @*<input type="submit" value="Clear" name="filter" class="filter" style="background-color:#999999"/>*@
    <input type="hidden" name="Search" id="Search" value="@Model.Search" />
}


<div class="products-wrapper">
    <p style="text-align:left; margin-bottom:0px;">
        @(String.IsNullOrWhiteSpace(Model.Search) ? "Showing all" : "You search for " + Model.Search + " found")  @Model.Products.TotalItemCount products
    </p>

    <div class="products-grid">
        @foreach (var item in Model.Products)
        {
            <div class="product-card box-shadow">
                @if (Request.IsAuthenticated && User.IsInRole("Admin"))
                {
                    <div class="admin">
                        <a href="@Url.Action("Edit", "Products", new { id = item.ID})">
                            <svg id="edit" xmlns="http://www.w3.org/2000/svg" width="100%" viewBox="0 0 27.067 27.067" class="admin-icon">
                                <g id="Group_29" data-name="Group 29" transform="translate(0 1.933)">
                                    <g id="Group_28" data-name="Group 28">
                                        <path id="Path_101" data-name="Path 101" d="M22.233,45.737a.967.967,0,0,0-.967.967V56.37a.967.967,0,0,1-.967.967H2.9a.967.967,0,0,1-.967-.967V37.037A.967.967,0,0,1,2.9,36.07H14.5a.967.967,0,1,0,0-1.933H2.9a2.9,2.9,0,0,0-2.9,2.9V56.37a2.9,2.9,0,0,0,2.9,2.9H20.3a2.9,2.9,0,0,0,2.9-2.9V46.7A.967.967,0,0,0,22.233,45.737Z" transform="translate(0 -34.137)" fill="#d1dbff" />
                                    </g>
                                </g>
                                <g id="Group_31" data-name="Group 31" transform="translate(5.8)">
                                    <g id="Group_30" data-name="Group 30">
                                        <path id="Path_102" data-name="Path 102" d="M122.591,1.088a3.7,3.7,0,0,0-5.234,0L104.625,13.82a.977.977,0,0,0-.233.378L102.458,20a.967.967,0,0,0,.916,1.272.982.982,0,0,0,.305-.049l5.8-1.933a.967.967,0,0,0,.378-.234L122.591,6.321A3.7,3.7,0,0,0,122.591,1.088Z" transform="translate(-102.409 -0.004)" fill="#d1dbff" />
                                    </g>
                                </g>
                            </svg>
                        </a>
                        <a href="@Url.Action("Delete", "Products", new { id = item.ID})">
                            <svg id="trash-can" xmlns="http://www.w3.org/2000/svg" width="100%" viewBox="0 0 20.968 31.039" class="admin-icon">
                                <g transform="translate(-83.057)">
                                    <path id="XMLID_1089_" d="M103.988,93.243l-.677-2.029a1,1,0,0,0-.949-.684H84.72a1,1,0,0,0-.949.684l-.677,2.029a.71.71,0,0,0,.673.934h19.548A.71.71,0,0,0,103.988,93.243Z" transform="translate(0 -85.043)" fill="#ffd1d1" />
                                    <path id="XMLID_835_" d="M103.145,199.548a1.379,1.379,0,0,0,1.37,1.227h11.744a1.379,1.379,0,0,0,1.37-1.227l2.1-18.858H101.05Z" transform="translate(-16.902 -169.736)" fill="#ffd1d1" />
                                    <path id="XMLID_831_" d="M197.709,2.607a.789.789,0,0,1,.788-.788h2.679a.789.789,0,0,1,.788.788V3.67h1.819V2.607A2.61,2.61,0,0,0,201.175,0H198.5a2.61,2.61,0,0,0-2.607,2.607V3.67h1.819Z" transform="translate(-105.993)" fill="#ffd1d1" />
                                </g>
                            </svg>
                        </a>

                    </div>
                }

                <a href="@Url.Action("Details", new { id = item.ID})">
                    <div class="image">
                        @if (item.ProductImageMappings != null && item.ProductImageMappings.Any())
                        {
                            @*<a href="@Url.Action("Details", new { id = item.ID})">*@
                            <img src="@(Url.Content(Constants.ProductImagePath) + item.ProductImageMappings.OrderBy(pim => pim.ImageNumber).ElementAt(0).ProductImage.FileName)">
                            @*</a>*@
                        }
                    </div>
                    <div class="product-content">
                        <div class="Name">
                            @item.Name
                        </div>
                        <div class="description">
                            @item.Description
                        </div>
                    </div>
                    <div class="price">
                        @item.Price
                    </div>

                </a>
            </div>
        }
    </div>
</div>

<div>
    Page @(Model.Products.PageCount < Model.Products.PageNumber ? 0 : Model.Products.PageNumber) of @Model.Products.PageCount
    @Html.PagedListPager(Model.Products, page => Url.Action("Index", new { category = @Model.Category, Search = @Model.Search, sortBy = @Model.SortBy, page }))
</div>

@*<table class="table">
    <tr>
        <th></th>
        <th>
            @Html.DisplayNameFor(model => model.Category)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Products.First().Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Products.First().Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Products.First().Price)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model.Products) {
    <tr>
        <td>
            @if (item.ProductImageMappings != null && item.ProductImageMappings.Any())
            {
                <a href="@Url.Action("Details", new { id = item.ID})">
                    <img src="@(Url.Content(Constants.ProductImagePath) + item.ProductImageMappings.OrderBy(pim => pim.ImageNumber).ElementAt(0).ProductImage.FileName)">
                </a>
            }
        </td>

        <td>
            @Html.DisplayFor(modelItem => item.Category.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Price)
        </td>
        <td>
            @if (Request.IsAuthenticated && User.IsInRole("Admin"))
            {
                @Html.ActionLink("Edit", "Edit", new { id = item.ID })
                @Html.Raw(" | ")
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            }
        </td>
    </tr>
}

</table>*@


